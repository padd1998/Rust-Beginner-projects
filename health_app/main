use std::thread;
use std::time::Duration;
use rand::Rng;

struct ExpensiveClosure <T> 
    where 
    T:Fn(u32) -> u32,
{
    calculation: T,
    value: Option<u32>,
}

impl <T> ExpensiveClosure<T> 
where 
T: Fn(u32) -> u32,
{
    fn new(calculation: T) -> ExpensiveClosure<T> { //new() creates an instance of expensive_closure
        ExpensiveClosure {
            calculation, 
            value: None,
        }
    }
    fn value(&mut self, arg: u32) -> u32 {
        match self.value {
            Some(v) => v,
            None => {
                let v = (self.calculation)(arg);
                self.value = Some(v);
                v
            }
        }
    }
}

fn generate_workout(intensity: u32) {
    let secret_number:u32 = rand::thread_rng().gen_range(1,101);

    let mut expensive_result = ExpensiveClosure::new(|num| {
        println!("Working out your day...");
        thread::sleep(Duration::from_secs(2));
        num
    });
    
    if intensity < 25 {
        println!("Do {} situps and press ups.", expensive_result.value(intensity));
    } else {
        if secret_number < 33 {
            println!("Take a break today!");
        } else {
            println!("Run {} miles. ", expensive_result.value(intensity)/10);            
        }
    }
}

fn main() {
    generate_workout(80)
}
